category <- "C2"
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets)
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
write.table(egs_df_excel2, file = paste("C:/Users/CBM/Documents/GitHub/GSEA/results/", folder, "tableGSEA_0.05_stat_ENSEMBL_noNA_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
##########################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
folder <- "GSEA_stat_C5_noNA_genes/"
category <- "C5"
subcategory <- NULL
genes <- "noNA_genes"
#Outputs
resD0 <- 'results/GSEA_stat_'
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
##########################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
category <- "C5"
subcategory <- NULL
genes <- "all_genes"
#Outputs
resD0 <- 'results/GSEA_stat_'
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
cat("\n Calculation GSEA and making some nice plots \n")
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
category <- "C5"
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets)
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_noNA_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
if (category == "C5"){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = paste(resD, prefix, "_gene_concept_net_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = paste(resD, prefix, "_ridge_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES")
invisible(dev.off())
jpeg(file = paste(resD, prefix, "_heatplot_stat_.jpeg", sep =""), units = 'in', width = 20, height = 10, res = 300)
heatplot(egs, foldChange=NULL)
invisible(dev.off())
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
##########################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
category <- "C2"
subcategory <- NULL
genes <- "all_genes"
#Outputs
resD0 <- 'results/GSEA_stat_'
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
cat("\n Calculation GSEA and making some nice plots \n")
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
category <- "C5"
category <- "C2"
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets)
set.seed(123)
egs <- GSEA(geneList = dat_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
if (category == "C5"){
#Write table for GOBP
C5_GOBP <- egs_df_excel2[grep("^GOBP", egs_df_excel2$Description),]
#C5_GOBP <- egs_df[str_detect(egs_df$Description, "GOBP"),] #Alternative way to extract subsets
write.table(C5_GOBP, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOBP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOCC
C5_GOCC <- egs_df_excel2[grep("^GOCC", egs_df_excel2$Description),]
write.table(C5_GOCC, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOCC_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for GOMF
C5_GOMF <- egs_df_excel2[grep("^GOMF", egs_df_excel2$Description),]
write.table(C5_GOMF, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_C5_GOMF_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
#Write table for HP
C5_HP <- egs_df_excel2[grep("^HP", egs_df_excel2$Description),]
write.table(C5_HP, file = paste(resD, "tableGSEA_0.05_stat_ENSEMBL_", genes, "_HP_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
}
jpeg(file = paste(resD, prefix, "_dotplot.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
dotplot(egs, x = "GeneRatio", color = "pvalue", showCategory = 20, font.size = 15)
invisible(dev.off())
jpeg(file = paste(resD, prefix, "_gene_concept_net_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
cnetplot(egs, categorySize="pvalue", foldChange=NULL, font.size = 15, colorEdge = T)
invisible(dev.off())
jpeg(file = paste(resD, prefix, "_ridge_stat_.jpeg", sep =""), units = 'in', width = 15, height = 10, res = 300)
par(mar = c(2, 2, 2, 5))
ridgeplot(egs, fill="p.adjust", core_enrichment = TRUE, orderBy = "NES")
invisible(dev.off())
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
##########################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
category <- "H"
subcategory <- NULL
subcategory <- NULL
genes <- "all_genes"
#Outputs
resD0 <- 'results/GSEA_log+pvalue_'
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
genes <- "noNA_genes"
#Outputs
resD0 <- 'results/GSEA_log+pvalue_'
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
##Calculate GSEA
x$fcsign <- sign(data$logFC)
##Calculate GSEA
x$fcsign <- sign(data$log2FoldChange)
##Calculate GSEA
data$fcsign <- sign(data$log2FoldChange)
##Calculate GSEA
data$fcsign <- sign(data$log2FoldChange)
data$logP=-log10(data$p_value)
data$metric= data$logP/data$fcsign
data$logP = -log10(data$p_value)
data$logP = -log10(data$pvalue)
data$metric = data$logP/data$fcsign
y <- data[,c("Gene", "metric")]
View(data)
y <- data[,c(row.names(data), "metric")]
View(data)
y <- data[,c(rownames(data), "metric")]
(rownames(data)
)
data$ensembl <- rownames(data)
y <- data[,c("ensembl, "metric")]
y <- data[,c("ensembl", "metric")]
head(y)
y <- data[,c("metric")]
head(y)
y <- data[,"metric"]
head(y)
y <- data[,c("metric")]
head(y)
y <- data[,c(X, "metric")]
y <- data[,c(rownames(data), "metric")]
y <- data[rownames(data),"metric"]
head(y)
y <- data["metric,"]
y <- data["metric",]
head(y)
y <- data[,"metric"]
head(y)
y <- data[, columnnames(data) %in% "metric"]
y <- data[, colnames(data) %in% "metric"]
head(y)
y <- data$metric
names(y) <- as.character(rownames(data))
head(y)
y_filtered <- y[!duplicated(names(y))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
y_sort <- sort(y_filtered, decreasing=TRUE)
mm_hallmark_sets <- msigdbr(species = "Homo sapiens", category = category) %>%
dplyr::select(gs_name, ensembl_gene)
head(mm_hallmark_sets)
set.seed(123)
egs <- GSEA(geneList = y_sort, pvalueCutoff = 0.05, eps = 0, pAdjustMethod = "BH", seed = T, TERM2GENE = mm_hallmark_sets)
head(egs@result)
egs_df <- data.frame(egs@result)
egs_df_excel2 <- egs_df[, 2:length(egs_df)]
write.table(egs_df_excel2, file = paste(resD, "tableGSEA_0.05_log+pvalue_ENSEMBL_", category, "_", subcategory, genes, "_",prefix,".txt", sep =""), sep= "\t", quote = F, row.names = F)
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(clusterProfiler, quietly = TRUE)
library(enrichplot, quietly = TRUE)
library(UpSetR, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(ggupset, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(optparse, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
library(dplyr, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(fgsea, quietly = TRUE)
library(reshape2, quietly = TRUE)
library(ComplexHeatmap, quietly = TRUE)
library(circlize, quietly = TRUE)
library(msigdbr, quietly = TRUE)
library(data.table, quietly = TRUE)
library(DT, quietly = TRUE)
library(stringr, quietly = TRUE)
})
##GET PARAMETERS AND DATA
##########################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
data <- read.table(input, sep= "\t", quote = "", header=T, row.names = 1)
prefix <- "GSEA_results"
category <- "H"
subcategory <- NULL
genes <- "noNA_genes"
statistic <- "stat" #select from stat, log2foldchange, log+pvalue
#Outputs
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
cat("\n Calculation GSEA and making some nice plots \n")
##Calculate GSEA
if (statistic == "log+pvalue"){
data$fcsign <- sign(data$log2FoldChange)
data$logP = -log10(data$pvalue)
data$metric = data$logP/data$fcsign
dat <- data$metric
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
} else{
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
}
##Calculate GSEA
if (statistic == "log+pvalue"){
data$fcsign <- sign(data$log2FoldChange)
data$logP = -log10(data$pvalue)
data$metric = data$logP/data$fcsign
dat <- data$metric
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using log+pvalue metric")
} else{
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using stat metric")
}
statistic <- "log+pvalue" #select from stat, log2foldchange, log+pvalue
#Outputs
resD0 <- paste0("results/GSEA_", statistic, "_")
resD <- gsub(':','_', paste0(resD0, category,'_', subcategory, genes, '/'))
if (!file.exists(resD)){
dir.create(file.path(resD))
}
##Calculate GSEA
if (statistic == "log+pvalue"){
data$fcsign <- sign(data$log2FoldChange)
data$logP = -log10(data$pvalue)
data$metric = data$logP/data$fcsign
dat <- data$metric
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using log+pvalue metric")
} else{
dat <- data$stat
names(dat) <- as.character(rownames(data))
dat_filtered <- dat[!duplicated(names(dat))] #remove rows with duplicate names = removes 7650 entries with NA as gene symbol
dat_sort <- sort(dat_filtered, decreasing=TRUE)
cat("Using stat metric")
}
if(input_file == "noNA"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
} else if(input_file == "all"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
}
input_file <- "noNA" #select from noNA or all
if(input_file == "noNA"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
} else if(input_file == "all"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
}
input_file <- "all" #select from noNA or all
if(input_file == "noNA"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/deseq2_noNA_padj_Affected_vs_Unaffected.tsv"
} else if(input_file == "all"){
input <- "C:/Users/CBM/Desktop/BWH_counts/definitive_results/tsv/all_genes_Affected_vs_Unaffected.tsv"
}
suppressPackageStartupMessages({
library(BiocManager, quietly = TRUE)
library(optparse, quietly = TRUE)
library(vsn, quietly = TRUE)
library(gplots, quietly = TRUE)
library(ggplot2, quietly = TRUE)
library(RColorBrewer, quietly = TRUE)
library(cluster, quietly = TRUE)
library(pheatmap, quietly = TRUE)
library(grid, quietly = TRUE)
library(BiocManager, quietly = TRUE)
library(DESeq2, quietly = TRUE)
library(AnnotationDbi, quietly = TRUE)
library(EnhancedVolcano, quietly = TRUE)
library(tidyr, quietly = TRUE)
library(ggrepel, quietly = TRUE)
library(cp4p, quietly = TRUE)
library(FDRestimation, quietly = TRUE)
orgdb <- "org.Hs.eg.db"
library(orgdb, quietly = TRUE, character.only = TRUE)
})
## CONFIGURATION
#####################
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
knitr::opts_chunk$set(include = TRUE, echo = TRUE, message = FALSE, warning = FALSE, eval = FALSE)
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
#Load config file
config <- "C:/Users/CBM/Desktop/BWH_counts/configfile_def.txt"
#Load count data
sampleTable <- read.table(config, header=TRUE)
#Transform data variables to factor
sampleTable$sample <- factor(sampleTable$sample)
sampleTable$condition <- factor(sampleTable$condition)
sampleTable$gender <- factor(sampleTable$gender)
sampleTable$age <- factor(sampleTable$age)
sampleTable$PED <- factor(sampleTable$PED)
resD <- paste0("results/")
#Load count data
sampleTable <- read.table(config, header=TRUE)
#Transform data variables to factor
sampleTable$sample <- factor(sampleTable$sample)
sampleTable$PED <- factor(sampleTable$PED)
#Build model using condition as main variable
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory=".",
design = ~ age + gender + PED + condition)
#Build model using condition as main variable
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory="C:/Users/CBM/Desktop/BWH_counts/",
design = ~ age + gender + PED + condition)
#Build model using condition as main variable
data <- DESeqDataSetFromHTSeqCount(sampleTable, directory="C:/Users/CBM/Desktop/BWH_counts/",
design = ~ age + gender + PED + condition)
#Set reference condition
data$condition <- relevel(data$condition, ref = "Unaffected")
#Pre-filtering (keep genes with counts along all samples >=10)
keep <- rowSums(counts(data)) >= 10
data <- data[keep,]
rm(keep)
#With this filter, the object goes from 61806 elements to 28525 elements
#Run deseq
dds <- DESeq(data)
#Alternative deseq run
#dds <- estimateSizeFactors(data)
#dds <- estimateDispersions(dds)
#dds <- nbinomWaldTest(dds, maxit = 10000)
#Obtain and write a file with normalized counts
ncounts <- counts(dds, normalized=TRUE)
write.table (ncounts, file=paste0(resD, "deseq2_normalized_counts_.tsv"), quote=FALSE, sep = "\t", col.names=NA)
library(DESeq2, quietly = TRUE)
knitr::opts_chunk$set(include = TRUE, echo = TRUE, message = FALSE, warning = FALSE, eval = FALSE)
#Paths
workingD <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(workingD))
resD <- paste0("results/")
#Load config file
config <- "C:/Users/CBM/Desktop/BWH_counts/configfile_def.txt"
#Load count data
sampleTable <- read.table(config, header=TRUE)
